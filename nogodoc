#!/usr/bin/perl

# nogodoc: generate godoc-style HTML documentation for small C++ libraries
# Copyright (C) 2020 Damon Revoe

use strict;
use warnings;

my $project_name = 'Project Name';

package HTML::Element; # {{{

sub new
{
	my ($class, $buffer_ref, $tag, %attributes) = @_;

	my $self = bless {buffer_ref => $buffer_ref, stack => []}, $class;

	$self->push_tag($tag, %attributes);

	return $self
}

sub contents
{
	return ${$_[0]->{buffer_ref}}
}

sub write
{
	my ($self, $markup) = @_;

	${$self->{buffer_ref}} .= $markup
}

sub write_markup
{
	my ($self, $markup) = @_;

	$markup =~ s/^\t+//mgo;

	$self->write($markup)
}

sub push_tag
{
	my ($self, $tag, %attributes) = @_;

	$self->write("<$tag\n");

	while (my ($key, $value) = each %attributes)
	{
		$self->write("$key=\"$value\"\n")
	}

	$self->write('>');

	push @{$self->{stack}}, $tag
}

sub open_tag
{
	my ($self, $tag, %attributes) = @_;

	return HTML::Element->new($self->{buffer_ref}, $tag, %attributes)
}

sub close_tag
{
	my ($self) = @_;

	while (my $tag = pop @{$self->{stack}})
	{
		$self->write("</$tag\n>")
	}
}

sub write_text
{
	my ($self, $text) = @_;

	$text =~ s/</&lt;/g;
	$text =~ s/>/&gt;/g;

	${$self->{buffer_ref}} .= $text
}

sub DESTROY
{
	my ($self) = @_;

	$self->close_tag()
}

# }}} (package HTML::Element)

package HTML::Page; # {{{

our @ISA = qw(HTML::Element);

use File::Basename;
use File::Path;

sub new
{
	my ($class, $title) = @_;

	my $buffer = "<!DOCTYPE html>\n";

	my $self = $class->SUPER::new(\$buffer, 'html', lang => "en");

	$self->open_tag('head')->open_tag('title')->write($title);

	return $self
}

sub print_page
{
	my ($self, $stream) = @_;

	$self->close_tag();

	$stream = *STDOUT unless $stream;

	binmode $stream;
	binmode $stream, ':utf8';

	print $stream ${$self->{buffer_ref}};
	print $stream "\n"
}

sub save
{
	my ($self, $pathname) = @_;

	mkpath(dirname($pathname));

	open FILE, '>', $pathname or die "$pathname\: $!";

	$self->print_page(*FILE);

	close FILE
}

# }}} (package HTML::Page)

package CppHeader; # {{{

sub new
{
	my ($class, $relative_pathname, $contents) = @_;

	if ($relative_pathname !~ m/.hh$/so)
	{
		warn "$relative_pathname - skipped: not a header file\n";
		return undef
	}

	if ($relative_pathname =~ m/impl/so)
	{
		warn "$relative_pathname - skipped: implementation\n";
		return undef
	}

	my @strings = ('&');

	$contents =~ s/&/&0./gso;

	# Preserve string and character literals
	for (qw(" '))
	{
		$contents =~ s{($_.*?(?<!\\)$_)}{
			'&' . (push(@strings, $1) - 1) . '.'}emg
	}

	# Save block comments together with strings
	$contents =~ s{(/\*.*?\*/)}{
		'&' . (push(@strings, $1) - 1) . '.'}egso;

	my (@doc_comments, @blocks, @classes, @fn);

	$contents =~ s{((?://.*?\n[\t ]*)+)}{
		'&DOC' . (push(@doc_comments, $1) - 1) . ':'}emg;

	#if ($contents !~ m/^&DOC0:/)
	#{
	#	warn "$relative_pathname - skipped: no file comment\n";
	#	return undef
	#}

	while ($contents =~ s{(\{[^{}]*?\})}{
		'&BLOCK' . (push(@blocks, $1) - 1) . ';'}egso)
	{
	}

	my $template_re = qr/(?:template\s*<[^;]*?>\s*)?/so;

	$contents =~ s{(&DOC\d+:$template_re(?:class|struct)[^;]+?;)}{
		'&CLASS' . (push(@classes, $1) - 1) . ';'}egso;

	$contents =~ s{(&DOC\d+:$template_re\S[^;]*?;)}{
		'&FN' . (push(@fn, $1) - 1) . ';'}egso;

	# Restore all documentation comments
	#$contents =~ s/&DOC(\d+):/$doc_comments[$1]/mg;

	# Restore all strings and block comments
	#$contents =~ s/&(\d+)./$strings[$1]/mg;

	my $self = bless
	{
		relative_pathname => $relative_pathname,
		contents => $contents,
		strings => \@strings,
		doc_comments => \@doc_comments,
		blocks => \@blocks,
		classes => \@classes,
		fn => \@fn
	}, $class;

	return $self
}

# }}} (package CppHeader)

package main; # {{{

use File::Basename;
use File::Find;
use File::Spec;

die "Usage: $0 OUTPUT_DIR\n" if @ARGV != 1;

my ($output_dir) = @ARGV;

my $top_srcdir = dirname($0);
die if basename($top_srcdir) ne 'doc';
$top_srcdir = dirname($top_srcdir);

my $include_dir = File::Spec->catdir($top_srcdir, 'include', 'vcf_scanner');

my @cpp_headers;

sub load_cpp_header
{
	return unless -f;

	my $relative_pathname =
		File::Spec->abs2rel($File::Find::name, $include_dir);

	open my $fh, '<', $File::Find::name or die;
	local $/ = undef;
	my $contents = <$fh>;
	close $fh;

	my $cpp_header = CppHeader->new($relative_pathname, $contents);

	push @cpp_headers, $cpp_header if $cpp_header
}

find({wanted => \&load_cpp_header, no_chdir => 1}, $include_dir);

foreach my $cpp_header (@cpp_headers)
{
	my $pathname = $cpp_header->{relative_pathname};
	my $cpp_header_page = HTML::Page->new("$project_name - $pathname");

	$cpp_header_page->push_tag('body');
	$cpp_header_page->push_tag('pre');
	$cpp_header_page->write_text($cpp_header->{contents});

	$cpp_header_page->write_text("====\n");

	my $i = 0;

	for my $class (@{$cpp_header->{classes}})
	{
		$cpp_header_page->write_text("CLASS$i:\n");
		$cpp_header_page->write_text("$class\n");
		$cpp_header_page->write_text("----\n");
		++$i;
	}

	$cpp_header_page->write_text("====\n");

	$i = 0;

	for my $fn (@{$cpp_header->{fn}})
	{
		$cpp_header_page->write_text("FN$i:\n");
		$cpp_header_page->write_text("$fn\n");
		$cpp_header_page->write_text("----\n");
		++$i;
	}

	$cpp_header_page->save(
		File::Spec->catfile($output_dir, "$pathname.html"))
}

my $readme_pathname = File::Spec->catfile($top_srcdir, 'README.md');

open README, '<', $readme_pathname or die "Cannot open $readme_pathname\: $!";

my $index_page = HTML::Page->new($project_name);

$index_page->push_tag('body');
$index_page->push_tag('pre');

while (<README>)
{
	$index_page->write_text($_)
}

close README;

$index_page->save(File::Spec->catfile($output_dir, 'index.html'));

# }}}

# vim600:foldmethod=marker
